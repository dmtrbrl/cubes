{"version":3,"sources":["assets/js/cubes.js"],"names":["CUBE_SPACE_SIZE","CUBE_SIZE","ROWS","COLS","CANVAS_BACKGROUND","CUBE_BORDER_COLOR","cubes","animations","randomBoolean","Math","random","randomRotation","x","THREE","randFloat","y","randomRotationStep","renderer","WebGLRenderer","canvas","document","getElementById","antialias","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","camera","OrthographicCamera","scene","Scene","j","k","geometry","BoxBufferGeometry","edges","EdgesGeometry","material","LineBasicMaterial","color","cube","LineSegments","rotation","position","set","push","add","render","forEach","animation","requestAnimationFrame"],"mappings":";AAAA,IAAMA,EAAkB,GAClBC,EAAY,GACZC,EAAO,EACPC,EAAO,EAEPC,EAAoB,QACpBC,EAAoB,SAEpBC,EAAQ,GACRC,EAAa,GAEbC,EAAgB,WAAMC,OAAAA,KAAKC,UAAY,IAEvCC,EAAiB,WAGd,MAAA,CAAEC,EAFKC,MAAMJ,KAAKK,UAAU,EAAG,IAAMN,EAAgB,GAAK,GAE9CO,EADLF,MAAMJ,KAAKK,UAAU,EAAG,IAAMN,EAAgB,GAAK,KAI7DQ,EAAqB,WAGlB,MAAA,CAAEJ,EAFKC,MAAMJ,KAAKK,UAAU,KAAO,OAAUN,EAAgB,GAAK,GAEtDO,EADLF,MAAMJ,KAAKK,UAAU,KAAO,OAAUN,EAAgB,GAAK,KAIrES,EAAW,IAAIJ,MAAMK,cAAc,CACvCC,OAAQC,SAASC,eAAe,SAChCC,WAAW,IAEbL,EAASM,cAAcnB,GACvBa,EAASO,cAAcC,OAAOC,kBAC9BT,EAASU,QAAQxB,EAAOH,EAAiBE,EAAOF,GAchD,IAZA,IAAM4B,EAAS,IAAIf,MAAMgB,mBACvB,EACA1B,EAAOH,EACP,EACAE,EAAOF,EACP,EACAE,EAAOF,GAGH8B,EAAQ,IAAIjB,MAAMkB,MAGfC,EAAI,EAAGA,EAAI9B,EAAM8B,IACnB,IAAA,IAAIC,EAAI,EAAGA,EAAI9B,EAAM8B,IAAK,CACvBC,IAAAA,EAAW,IAAIrB,MAAMsB,kBACzBlC,EACAA,EACAA,GAEImC,EAAQ,IAAIvB,MAAMwB,cAAcH,GAChCI,EAAW,IAAIzB,MAAM0B,kBAAkB,CAC3CC,MAAOnC,IAEHoC,EAAO,IAAI5B,MAAM6B,aAAaN,EAAOE,GAC1B3B,EAAAA,IAATC,EAAAA,EAAAA,EAAGG,EAAAA,EAAAA,EACX0B,EAAKE,SAAS/B,EAAIA,EAClB6B,EAAKE,SAAS5B,EAAIA,EAClB0B,EAAKG,SAASC,IACZ7C,EAAkB,EAAIA,EAAkBiC,EACxCjC,EAAkB,EAAIA,EAAkBgC,GACvC/B,GAGHK,EAAMwC,KAAKL,GACXX,EAAMiB,IAAIN,GAed,SAASO,IACPzC,EAAW0C,QAAQ,SAAAC,GAAaA,OAAAA,MAChCjC,EAAS+B,OAAOlB,EAAOF,GACvBuB,sBAAsBH,GAbxB1C,EAAM2C,QAAQ,SAAAR,GACKzB,IAAAA,EAAAA,IAATJ,EAAAA,EAAAA,EAAGG,EAAAA,EAAAA,EAKXR,EAAWuC,KAJO,WAChBL,EAAKE,SAAS/B,GAAKA,EACnB6B,EAAKE,SAAS5B,GAAKA,MAKvBoC,sBAAsBH","file":"cubes.12a9ed2c.js","sourceRoot":"../src","sourcesContent":["const CUBE_SPACE_SIZE = 70;\nconst CUBE_SIZE = 20;\nconst ROWS = 5;\nconst COLS = 5;\n\nconst CANVAS_BACKGROUND = 0x3f72af;\nconst CUBE_BORDER_COLOR = 0xf9f7f7;\n\nconst cubes = [];\nconst animations = [];\n\nconst randomBoolean = () => Math.random() >= 0.5;\n\nconst randomRotation = () => {\n  const randX = THREE.Math.randFloat(1, 3) * (randomBoolean ? 1 : -1);\n  const randY = THREE.Math.randFloat(1, 3) * (randomBoolean ? 1 : -1);\n  return { x: randX, y: randY };\n};\n\nconst randomRotationStep = () => {\n  const randX = THREE.Math.randFloat(0.003, 0.005) * (randomBoolean ? 1 : -1);\n  const randY = THREE.Math.randFloat(0.003, 0.005) * (randomBoolean ? 1 : -1);\n  return { x: randX, y: randY };\n};\n\nconst renderer = new THREE.WebGLRenderer({\n  canvas: document.getElementById(\"cubes\"),\n  antialias: true\n});\nrenderer.setClearColor(CANVAS_BACKGROUND);\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(COLS * CUBE_SPACE_SIZE, ROWS * CUBE_SPACE_SIZE);\n\nconst camera = new THREE.OrthographicCamera(\n  0,\n  COLS * CUBE_SPACE_SIZE,\n  0,\n  ROWS * CUBE_SPACE_SIZE,\n  1,\n  ROWS * CUBE_SPACE_SIZE\n);\n\nconst scene = new THREE.Scene();\n\n// Populate Cubes\nfor (let j = 0; j < ROWS; j++) {\n  for (let k = 0; k < COLS; k++) {\n    const geometry = new THREE.BoxBufferGeometry(\n      CUBE_SIZE,\n      CUBE_SIZE,\n      CUBE_SIZE\n    );\n    const edges = new THREE.EdgesGeometry(geometry);\n    const material = new THREE.LineBasicMaterial({\n      color: CUBE_BORDER_COLOR\n    });\n    const cube = new THREE.LineSegments(edges, material);\n    const { x, y } = randomRotation();\n    cube.rotation.x = x;\n    cube.rotation.y = y;\n    cube.position.set(\n      CUBE_SPACE_SIZE / 2 + CUBE_SPACE_SIZE * k,\n      CUBE_SPACE_SIZE / 2 + CUBE_SPACE_SIZE * j,\n      -CUBE_SIZE\n    );\n\n    cubes.push(cube);\n    scene.add(cube);\n  }\n}\n\n// Create random rotation animations\ncubes.forEach(cube => {\n  const { x, y } = randomRotationStep();\n  const animation = () => {\n    cube.rotation.x += x;\n    cube.rotation.y += y;\n  };\n  animations.push(animation);\n});\n\nrequestAnimationFrame(render);\nfunction render() {\n  animations.forEach(animation => animation());\n  renderer.render(scene, camera);\n  requestAnimationFrame(render);\n}\n"]}